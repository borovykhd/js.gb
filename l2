//HW
/*1. Дан код:

var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2 Первым выполненяется операция увеличения а
d = b++; alert(d);           // 1 Первым выполняеться операция присвоения
c = (2+ ++a); alert(c);      // 5 a=3  2+3=5  
d = (2+ b++); alert(d);      // 4 b=2  2+2=4
alert(a);                    // 3 Значение a=3  
alert(b);                    // 3 Значение b=3 (к этой операции)

*/
    
    
  
    
/*2. Чему будет равен x в примере ниже?

var a = 2;
var x = 1 + (a *= 2); // полная запись var x = 1 + (2 * 2) = 5;
*/

/*3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:

    если a и b положительные, вывести их разность;
    если а и b отрицательные, вывести их произведение;
    если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.

var a = parseInt(prompt("введите значение A")), b= parseInt(prompt("введите значение B"))
if (a >= 0 && b >= 0) {
    alert((a > b) ? ("Разница чисел равна " + (a - b)) : ("Разница чисел равна " + (b - a)))
}else if (a < 0 && b < 0) {
    alert("Произведением значений a и b равно " + (a * b));
}else{
    alert("Сумма значений a и b равна " + (a + b));
}
  
*/
  
    
/*4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. Можно сделать решение двумя способами. Второй способ - использовать рекурсию, можно без switch

    a = +prompt('введите число от 0 до 15')
    switch (a) {
    case 0:
        console.log(0);
        alert(0);
    case 1:
        console.log(1);
        alert(1);
    case 2:
        console.log(2);
        alert(2);
    case 3:
        console.log(3);
        alert(3);
    case 4:
        console.log(4);
        alert(4);
    case 5:
        console.log(5);
        alert(5);
    case 6:
        console.log(6);
        alert(6);
    case 7:
        console.log(7);
        alert(7);
    case 8:
        console.log(8);
        alert(8);
    case 9:
        console.log(9);
        alert(9);
    case 10:
        console.log(10);
        alert(10);
    case 11:
        console.log(11);
        alert(11);
    case 12:
        console.log(12);
        alert(12);
    case 13:
        console.log(13);
        alert(13);
    case 14:
        console.log(14);
        alert(14);
    case 15:
        console.log(15);
        alert(15);
    default:
        console.log('-------');
    }

второй способ c использованием рекурсии
    
    function output(n) {
        if (n == 16) {
            return 0;
        }
        console.log(n);
        alert(n);
        output(n + 1);
    }

    a = +prompt("введите число от 0 до 15")
    if (a<=15 && a>=0 ){
        output(a);
    } else{
        alert("введите другое число");
    }

*/
    
/*5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.

    var a = +prompt("введите первое число");
    var b = +prompt("введите второе число");

    function plus(a, b) {
        return a + b;
    }

    function minus(a, b) {
        return a - b;
    }

    function div(a, b) {
        return a / b;
    }

    function mult(a, b) {
        return a * b;
    }
    alert("функция присвоения " + plus(a, b));
    alert("функция вычитания " + minus(a, b));
    alert("функция деления " + div(a, b));
    alert("функция умножения " + mult(a, b));
		


    
6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5) и вернуть полученное значение (использовать switch).
    
    function mathOperation(arg1, arg2, operation){
        switch(operation){case "plus":
                return arg1 + arg2;
                break;
            case "minus":
                return ((arg1 > arg2) ? (arg1 - arg2) : (arg2 - arg1));
                break;
            case "div":
                return ((arg1 > arg2) ? (arg1 / arg2) : (arg2 / arg1));
            case "mult":
                return arg1 * arg2;
        }
    }
    
    var a = +prompt('введите значение для аргумента 1');
    var b = +prompt('введите значение для аргумента 2');
    var c = prompt('введите тип операции "plus, minus, div, mult"');
    alert(mathOperation(a,b,c));


    
7. *Сравнить null и 0. Попробуйте объяснить результат.
Сравним null с нулём:

alert( null > 0 );  // (1) false
alert( null == 0 ); // (2) false
alert( null >= 0 ); // (3) true

Результат последнего сравнения говорит о том, что "null больше или равно нулю", тогда результат одного из сравнений выше должен быть true, но они оба ложны.

Причина в том, что нестрогое равенство и сравнения > < >= <= работают по-разному. Сравнения преобразуют null в число, рассматривая его как 0. Поэтому выражение (3) null >= 0 истинно, а null > 0 ложно.
Поэтому (2) null == 0 ложно.
С точки зрения математики, если у нас есть два числа, x и y, и если x не меньше, чем y, тогда x должно быть больше чем y или равно ему.

Данный оператор работает именно так для того, чтобы оптимизировать вычисления. Зачем сначала проверять, больше ли x чем y, и, если это не так, проверять, равняется ли значение x значению y, если можно выполнить всего одно сравнение, проверить, меньше ли x чем y, а затем использовать результат этого сравнения для того, чтобы вывести результат исходного выражения.

    
8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.

    function power(val, pow) {
        if (pow == 1){
            return val;
        }else{
            return val * Math.pow(val, pow - 1);
        }
    }
    
    var a = +prompt('введите значение числа');
    var b = +prompt('введите значение степени');
    
    alert(power(a, b));

*/



